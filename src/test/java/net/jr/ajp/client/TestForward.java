/* Copyright (c) 2014 Julien Rialland <julien.rialland@gmail.com>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.jr.ajp.client;

import io.netty.channel.Channel;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.jr.ajp.client.impl.mock.MockForwardRequest;
import net.jr.ajp.client.impl.mock.MockForwardResponse;
import net.jr.ajp.client.pool.Channels;

import org.junit.Assert;
import org.junit.Test;

public class TestForward extends AbstractTomcatTest {

	private static final String DIZZY_MP4_MD5SUM = "iyn+VBY3fk/eVjdWVYMQqg==";

	private static final Path DIZZY_MP4 = Paths.get("./src/test/resources/dizzy.mp4");

	@SuppressWarnings("serial")
	public TestForward() {
		super(Protocol.Ajp);

		addStaticResource("/dizzy.mp4", DIZZY_MP4);

		addServlet("/error500", new HttpServlet() {
			@Override
			protected void service(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
				throw new ServletException("I just wanted to raise an exception !");
			}
		});

		addServlet("/respondError", new HttpServlet() {
			@Override
			protected void service(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
				resp.setStatus(Integer.parseInt(req.getParameter("code")));
			}
		});

		addServlet("/formPost", new HttpServlet() {

			@Override
			protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
				final PrintWriter pw = resp.getWriter();
				for (final String paramName : Collections.list(req.getParameterNames())) {
					final String paramValue = req.getParameter(paramName);
					pw.println(paramName + "=" + paramValue);
				}
			};
		});

		addServlet("/rawPost", new HttpServlet() {

			@Override
			protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
				final String md5 = computeMd5(req.getInputStream());
				resp.getWriter().print(md5);
			};

		});
	}

	@Test
	public void testBigFile() throws Exception {
		final MockForwardRequest request = new MockForwardRequest();
		final MockForwardResponse response = new MockForwardResponse();
		request.setRequestUri("/dizzy.mp4");

		final Channel channel = Channels.connect("localhost", getPort());
		new Forward(request, response).doWithChannel(channel);

		Assert.assertEquals(200, response.getStatusCode());
		Assert.assertEquals("OK", response.getStatusMessage());
		Assert.assertEquals("1595696", response.getHeaders().get("Content-Length"));
		Assert.assertEquals(DIZZY_MP4_MD5SUM, computeMd5(response.getResponseBodyAsStream()));
	}

	/**
	 * The servlet container generates a 'real' 404
	 * 
	 * @throws Exception
	 */
	@Test
	public void testRealError404() throws Exception {

		final MockForwardRequest request = new MockForwardRequest();
		final MockForwardResponse response = new MockForwardResponse();

		request.setRequestUri("/path/to/nonexisting/file.html");

		final Channel channel = Channels.connect("localhost", getPort());
		new Forward(request, response).doWithChannel(channel);

	}

	/**
	 * The 404 error is generated by the servlet
	 */
	@Test
	public void testServletError404() throws Exception {
		final MockForwardRequest request = new MockForwardRequest();
		final MockForwardResponse response = new MockForwardResponse();

		request.setRequestUri("/respondError?code=404");

		final Channel channel = Channels.connect("localhost", getPort());
		new Forward(request, response).doWithChannel(channel);
	}

	@Test
	public void testError500() throws Exception {
		final MockForwardRequest request = new MockForwardRequest();
		final MockForwardResponse response = new MockForwardResponse();

		request.setRequestUri("/error500");
		final Channel channel = Channels.connect("localhost", getPort());
		new Forward(request, response).doWithChannel(channel);
	}

	@Test
	public void testFormPost() throws Exception {

		final MockForwardRequest request = new MockForwardRequest();
		final MockForwardResponse response = new MockForwardResponse();

		request.setMethod("POST");
		request.setRequestUri("/formPost");
		request.addHeader("Content-Type", "application/x-www-form-urlencoded;Charset=utf-8");
		request.setRequestBody("Action=GetStatus&SignatureMethod=HmacSHA256&JobId=JOBID&SignatureVersion=2&Version=2010-06-03&Signature=%2FVfkltRBOoSUi1sWxRzN8rw%3D&Timestamp=2011-06-20T22%3A30%3A59.556Z");

		final Channel channel = Channels.connect("localhost", getPort());
		new Forward(request, response).doWithChannel(channel);

		Assert.assertEquals(200, response.getStatusCode());
		Assert.assertEquals("OK", response.getStatusMessage());

		System.out.println(response.getResponseBodyAsString());

	}

	@Test
	public void testRawPost() throws Exception {
		final MockForwardRequest request = new MockForwardRequest();
		final MockForwardResponse response = new MockForwardResponse();

		request.setMethod("POST");
		request.setRequestUri("/rawPost");
		request.setRequestBody(DIZZY_MP4.toUri().toURL().openStream());
		request.addHeader("Content-Length", Long.toString(Files.size(DIZZY_MP4)));

		final Channel channel = Channels.connect("localhost", getPort());
		new Forward(request, response).doWithChannel(channel);

		Assert.assertEquals(200, response.getStatusCode());
		Assert.assertEquals("OK", response.getStatusMessage());
		Assert.assertEquals(DIZZY_MP4_MD5SUM, response.getResponseBodyAsString());

	}
}
